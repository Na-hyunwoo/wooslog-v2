name: Build and Deploy Next.js App

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: na-hyunwoo/wooslog-v2/main
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/main/dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NOTION_API_KEY=${{ secrets.NOTION_API_KEY }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 최신 이미지 가져오기
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # 필요한 디렉토리 생성
            mkdir -p ~/nginx/conf.d ~/certbot/conf ~/certbot/www ~/logs

            # nginx 기본 설정 파일 생성
            cat > ~/nginx/nginx.conf << 'EOL'
            user nginx;
            worker_processes auto;

            error_log /var/log/nginx/error.log warn;
            pid /var/run/nginx.pid;

            events {
                worker_connections 1024;
            }

            http {
                include /etc/nginx/mime.types;
                default_type application/octet-stream;
                
                log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" "$http_x_forwarded_for"';
                
                access_log /var/log/nginx/access.log main;
                
                sendfile on;
                keepalive_timeout 65;
                
                include /etc/nginx/conf.d/*.conf;
            }
            EOL

            # nginx 앱 설정 파일 생성 - 우선 HTTP 서비스부터 확인
            cat > ~/nginx/conf.d/app.conf << 'EOL'
            server {
                listen 80;
                server_name devna.xyz www.devna.xyz;
                
                # Let's Encrypt 인증 경로
                location /.well-known/acme-challenge/ {
                    root /var/www/certbot;
                }
                
                # 일단 HTTP만 사용하도록 설정 (나중에 HTTPS 설정 가능)
                location / {
                    proxy_pass http://main-app:3000;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                }
            }

            # HTTPS 설정은 인증서 발급 후 직접 추가할 예정
            EOL

            # docker-compose 파일 생성
            cat > ~/docker-compose.yml << 'EOL'
            version: '3'

            services:
              main-app:
                image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
                restart: always
                ports:
                  - "3000:3000"
                environment:
                  - NODE_ENV=production
                  - NOTION_API_KEY=${{ secrets.NOTION_API_KEY }}
                  - NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
                  - NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
                volumes:
                  - app-data:/app/data
                  - ./logs:/app/logs
                networks:
                  - app-network
                healthcheck:
                  test: ["CMD", "curl", "-f", "http://localhost:3000"]
                  interval: 30s
                  timeout: 10s
                  retries: 3
                  start_period: 40s
                deploy:
                  resources:
                    limits:
                      cpus: '0.5'
                      memory: 512M

              nginx: 
                image: nginx:alpine
                container_name: nginx-proxy
                restart: always
                ports:
                  - "80:80"
                  - "443:443"
                volumes:
                  - ./nginx/conf.d:/etc/nginx/conf.d
                  - ./nginx/nginx.conf:/etc/nginx/nginx.conf
                  - ./certbot/conf:/etc/letsencrypt
                  - ./certbot/www:/var/www/certbot
                depends_on:
                  - main-app
                networks:
                  - app-network

            networks:
              app-network:
                driver: bridge

            volumes:
              app-data:
                driver: local
            EOL

            # 배포 실행
            cd ~
            docker-compose down
            docker-compose up -d

            # HTTPS 설정 안내 출력
            echo "====================================="
            echo "사이트가 HTTP로 배포되었습니다."
            echo "HTTPS 설정을 위해 다음 단계를 따르세요:"
            echo "1. 사이트가 HTTP로 정상 작동하는지 확인"
            echo "2. 서버에 접속하여 다음 명령 실행:"
            echo "   docker run --rm -it --name certbot -v ~/certbot/conf:/etc/letsencrypt -v ~/certbot/www:/var/www/certbot certbot/certbot certonly --webroot -w /var/www/certbot -d devna.xyz -d www.devna.xyz --email contactharry97@gmail.com --agree-tos --no-eff-email"
            echo "3. 인증서 발급 후 Nginx 설정 업데이트"
            echo "====================================="

            # 미사용 이미지 정리
            docker image prune -af
