name: Build and Deploy Next.js App

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: na-hyunwoo/wooslog-v2/main
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,format=long
            type=ref,event=branch
            latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./apps/main/dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            NOTION_API_KEY=${{ secrets.NOTION_API_KEY }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }}
            NEXT_PUBLIC_CLOUDINARY_FOLDER=${{ secrets.NEXT_PUBLIC_CLOUDINARY_FOLDER }}
            REVALIDATION_KEY=${{ secrets.REVALIDATION_KEY }}

      - name: Copy configuration files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "config/nginx/,config/docker/"
          target: "~/"
          strip_components: 1

      - name: Deploy to server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 최신 이미지 가져오기
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

            # 필요한 디렉토리 생성
            mkdir -p ~/nginx/conf.d ~/certbot/conf ~/certbot/www ~/logs

            # 설정 파일 복사
            cp ~/nginx/nginx.conf ~/nginx/
            cp ~/nginx/app.conf ~/nginx/conf.d/

            # 환경 변수 파일 생성
            cat > ~/.env << EOL
            REGISTRY=${{ env.REGISTRY }}
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            NOTION_API_KEY=${{ secrets.NOTION_API_KEY }}
            NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}
            NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}
            CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }}
            NEXT_PUBLIC_CLOUDINARY_FOLDER=${{ secrets.NEXT_PUBLIC_CLOUDINARY_FOLDER }}
            REVALIDATION_KEY=${{ secrets.REVALIDATION_KEY }}
            EOL

            # 인증서 자동 갱신 cron 작업 설정
            (crontab -l 2>/dev/null | grep -v "certbot renew" || true; echo "0 3 * * * docker run --rm --name certbot-renew -v ~/certbot/conf:/etc/letsencrypt -v ~/certbot/www:/var/www/certbot certbot/certbot renew --webroot -w /var/www/certbot && docker exec nginx-proxy nginx -s reload") | crontab -

            # 배포 실행
            cd ~
            docker-compose --env-file .env -f docker/docker-compose.yml down -v
            docker-compose --env-file .env -f docker/docker-compose.yml up -d

            # 미사용 이미지 정리
            docker image prune -af

      - name: Check .next/server/app/api/revalidate/route.js in built image
        run: |
          docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest ls /app/apps/main/.next/server/app/api/revalidate/
